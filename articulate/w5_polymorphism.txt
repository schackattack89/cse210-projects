Polymorphism is the ability to take methods which have been inherited from a super class and modify them in a derived class to provide different functionality. The benefit of Polymorphism is that you can use the same method on any object belonging to a base class and it will behave according to the derived class's parameters. In this case you can call a single method to act upon a set of objects and each child object will override the method accordingly. For example, we wrote a GetDetailsString() method in the base class Goals.cs which returns the basic attributes of a Goal object. Then we used the same GetDetailsString() method in our child classes and with overriding functionality (i.e. ChecklistGoal.GetDetailsString() ALSO returns attributes of _target and _bonus etc.) By using Polymorphism in this way, we were able to manipulate a list of Goal objects which contained different types of Goals (SimpleGoal, ChecklistGoal, EternalGoal) all with a single GetDetailsString() method and receive the desired output contingent upon each class's overriding of the method. So we were able to create a single list to contain all types of goals and act on them simultaneously instead of instantiating separate lists and then potentially having to recombine them after manipulating them.