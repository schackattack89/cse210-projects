Abstraction is the idea of making complex concepts simpler. In programming, abstraction means to break down objects into their attributes and behaviors. It is beneficial because that way we can define objects that will be used in our programs and only have to worry about the things that are relevant to what we are trying to achieve. The example of a "person" object talked about how there are lots of things that can define a person, but if we're writing a program that only deals with things like names or birthdays for example, then we can define a "person" object with only those abstract ideas. In the code that we worked on this week with the Journal program, we used abstraction to define only the relevant classes of a journal - in our case, the journal itself, entries to the journal, and prompts for journal entries. Each of those objects then had attributes which we wanted to be able to access and manipulate (like _date, _prompt, and _entryText or each particular Entry object), as well as behaviors we would need to achieve through methrods (like _Display, _Save and _Load for Journal objects). By using abstraction we took an idea that could be much more complex (i.e. a journal) by having attributes like line spacing, ink color, page size, etc., and only include the abstract ideas that we wanted to focus on specificially for this project. In that way, abstraction helped us to greatly simply the implementation of a journal as we wanted it in this program.